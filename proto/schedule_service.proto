syntax = "proto3";
package sdb;

/* to generate service */
option cc_generic_services = true;

option go_package="./sdb";
import  "task.proto";
import  "kvpair.proto";
// import  "worker_service.proto";

// The greeting service definition.
// Sends a greeting
service Schedule {
  rpc Depart(ExecQueryRequest) returns (ExecQueryReply) {}
  rpc PushWorkerResult(PushWorkerResultRequest) returns (PushWorkerResultReply) {}
  rpc CheckQueryResult(CheckQueryResultRequest) returns (CheckQueryResultReply) {}
  rpc NewWorkerId(NewWorkerIdRequest) returns (NewWorkerIdReply) {}
  rpc WorkerPing(WorkerPingRequest) returns (WorkerPongReply) {}
}

// The request message containing the user's name.
message ExecQueryRequest {
  string name = 1;
  string sql = 2;
  uint64 sid = 3;
  uint64 uid = 4;
  uint64 dbid = 5;
  string uuid = 6; // if uuid is not empty, request will be exector exactly once
  uint64 organization_id = 7;
  string organization = 8;
  map<string, string> params = 9;
}
// The response message containing the greetings
message ExecQueryReply {
  uint64 query_id = 1;
  uint64 sessionid = 2;
  uint64 uid = 3;
  uint64 dbid = 4;
  string result_dir = 5;
  map<string, string> params = 10;
}

message PushWorkerResultRequest {
  TaskIdentify task_id  = 1;
  uint64 sessionid = 2;
  uint64 dbid = 3;
 
  WorkerResultData result = 5;
}

message PushWorkerResultReply {
  int32 rescode = 1;
  string resmsg = 2;
}

message CheckQueryResultRequest {
  uint64 query_id = 1;
  uint64 sessionid = 2;
  uint64 uid = 3;
  uint64 dbid = 4;
}

message CheckQueryResultReply {
  int32 rescode = 1;
  string resmsg = 2;
  WorkerResultData result = 3;
}

message NewWorkerIdRequest {
  uint32 cluster = 1;
}

message NewWorkerIdReply {
  uint64 worker_id = 1;
}

message WorkerPingRequest {
  uint64 worker_id = 1;
  uint32 cluster = 2;
  string addr = 3;
  WorkerState state = 4;
  uint64 currect_index = 5;
}

message WorkerPongReply {
  int32 rescode = 1;
  string resmsg = 2;
}

