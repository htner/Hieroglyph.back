// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: optimizer_service.proto

package sdb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OptimizerClient is the client API for Optimizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OptimizerClient interface {
	Optimize(ctx context.Context, in *OptimizeRequest, opts ...grpc.CallOption) (*OptimizeReply, error)
}

type optimizerClient struct {
	cc grpc.ClientConnInterface
}

func NewOptimizerClient(cc grpc.ClientConnInterface) OptimizerClient {
	return &optimizerClient{cc}
}

func (c *optimizerClient) Optimize(ctx context.Context, in *OptimizeRequest, opts ...grpc.CallOption) (*OptimizeReply, error) {
	out := new(OptimizeReply)
	err := c.cc.Invoke(ctx, "/sdb.Optimizer/Optimize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OptimizerServer is the server API for Optimizer service.
// All implementations must embed UnimplementedOptimizerServer
// for forward compatibility
type OptimizerServer interface {
	Optimize(context.Context, *OptimizeRequest) (*OptimizeReply, error)
	mustEmbedUnimplementedOptimizerServer()
}

// UnimplementedOptimizerServer must be embedded to have forward compatible implementations.
type UnimplementedOptimizerServer struct {
}

func (UnimplementedOptimizerServer) Optimize(context.Context, *OptimizeRequest) (*OptimizeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Optimize not implemented")
}
func (UnimplementedOptimizerServer) mustEmbedUnimplementedOptimizerServer() {}

// UnsafeOptimizerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OptimizerServer will
// result in compilation errors.
type UnsafeOptimizerServer interface {
	mustEmbedUnimplementedOptimizerServer()
}

func RegisterOptimizerServer(s grpc.ServiceRegistrar, srv OptimizerServer) {
	s.RegisterService(&Optimizer_ServiceDesc, srv)
}

func _Optimizer_Optimize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptimizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptimizerServer).Optimize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdb.Optimizer/Optimize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptimizerServer).Optimize(ctx, req.(*OptimizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Optimizer_ServiceDesc is the grpc.ServiceDesc for Optimizer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Optimizer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdb.Optimizer",
	HandlerType: (*OptimizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Optimize",
			Handler:    _Optimizer_Optimize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "optimizer_service.proto",
}
