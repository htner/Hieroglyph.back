// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.6
// source: kvpair.proto

package sdb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkerState int32

const (
	WorkerState_WSInit     WorkerState = 0
	WorkerState_WSReady    WorkerState = 1
	WorkerState_WSOverload WorkerState = 2
	WorkerState_WSBusy     WorkerState = 3
	WorkerState_WSStop     WorkerState = 4
)

// Enum value maps for WorkerState.
var (
	WorkerState_name = map[int32]string{
		0: "WSInit",
		1: "WSReady",
		2: "WSOverload",
		3: "WSBusy",
		4: "WSStop",
	}
	WorkerState_value = map[string]int32{
		"WSInit":     0,
		"WSReady":    1,
		"WSOverload": 2,
		"WSBusy":     3,
		"WSStop":     4,
	}
)

func (x WorkerState) Enum() *WorkerState {
	p := new(WorkerState)
	*p = x
	return p
}

func (x WorkerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkerState) Descriptor() protoreflect.EnumDescriptor {
	return file_kvpair_proto_enumTypes[0].Descriptor()
}

func (WorkerState) Type() protoreflect.EnumType {
	return &file_kvpair_proto_enumTypes[0]
}

func (x WorkerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkerState.Descriptor instead.
func (WorkerState) EnumDescriptor() ([]byte, []int) {
	return file_kvpair_proto_rawDescGZIP(), []int{0}
}

type LakeFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId uint64 `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Space  uint32 `protobuf:"varint,2,opt,name=space,proto3" json:"space,omitempty"`
}

func (x *LakeFile) Reset() {
	*x = LakeFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvpair_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LakeFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LakeFile) ProtoMessage() {}

func (x *LakeFile) ProtoReflect() protoreflect.Message {
	mi := &file_kvpair_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LakeFile.ProtoReflect.Descriptor instead.
func (*LakeFile) Descriptor() ([]byte, []int) {
	return file_kvpair_proto_rawDescGZIP(), []int{0}
}

func (x *LakeFile) GetFileId() uint64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *LakeFile) GetSpace() uint32 {
	if x != nil {
		return x.Space
	}
	return 0
}

// must be no side effects, for cache
type LakeFileMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta map[string]string `protobuf:"bytes,1,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LakeFileMeta) Reset() {
	*x = LakeFileMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvpair_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LakeFileMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LakeFileMeta) ProtoMessage() {}

func (x *LakeFileMeta) ProtoReflect() protoreflect.Message {
	mi := &file_kvpair_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LakeFileMeta.ProtoReflect.Descriptor instead.
func (*LakeFileMeta) Descriptor() ([]byte, []int) {
	return file_kvpair_proto_rawDescGZIP(), []int{1}
}

func (x *LakeFileMeta) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

type DeleteLakeFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*LakeFile `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *DeleteLakeFiles) Reset() {
	*x = DeleteLakeFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvpair_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLakeFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLakeFiles) ProtoMessage() {}

func (x *DeleteLakeFiles) ProtoReflect() protoreflect.Message {
	mi := &file_kvpair_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLakeFiles.ProtoReflect.Descriptor instead.
func (*DeleteLakeFiles) Descriptor() ([]byte, []int) {
	return file_kvpair_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteLakeFiles) GetFiles() []*LakeFile {
	if x != nil {
		return x.Files
	}
	return nil
}

type InsertLakeFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*LakeFileDetail `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *InsertLakeFiles) Reset() {
	*x = InsertLakeFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvpair_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertLakeFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertLakeFiles) ProtoMessage() {}

func (x *InsertLakeFiles) ProtoReflect() protoreflect.Message {
	mi := &file_kvpair_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertLakeFiles.ProtoReflect.Descriptor instead.
func (*InsertLakeFiles) Descriptor() ([]byte, []int) {
	return file_kvpair_proto_rawDescGZIP(), []int{3}
}

func (x *InsertLakeFiles) GetFiles() []*LakeFileDetail {
	if x != nil {
		return x.Files
	}
	return nil
}

type PrepareLakeFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uint64 space_id = 1;
	// uint64 start_file_id = 2;
	// uint64 end_file_id = 3;
	Files []*LakeFile `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *PrepareLakeFiles) Reset() {
	*x = PrepareLakeFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvpair_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareLakeFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareLakeFiles) ProtoMessage() {}

func (x *PrepareLakeFiles) ProtoReflect() protoreflect.Message {
	mi := &file_kvpair_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareLakeFiles.ProtoReflect.Descriptor instead.
func (*PrepareLakeFiles) Descriptor() ([]byte, []int) {
	return file_kvpair_proto_rawDescGZIP(), []int{4}
}

func (x *PrepareLakeFiles) GetFiles() []*LakeFile {
	if x != nil {
		return x.Files
	}
	return nil
}

type LakeLogDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deletes *DeleteLakeFiles `protobuf:"bytes,1,opt,name=deletes,proto3" json:"deletes,omitempty"`
	Inserts *InsertLakeFiles `protobuf:"bytes,2,opt,name=inserts,proto3" json:"inserts,omitempty"`
}

func (x *LakeLogDetail) Reset() {
	*x = LakeLogDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvpair_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LakeLogDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LakeLogDetail) ProtoMessage() {}

func (x *LakeLogDetail) ProtoReflect() protoreflect.Message {
	mi := &file_kvpair_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LakeLogDetail.ProtoReflect.Descriptor instead.
func (*LakeLogDetail) Descriptor() ([]byte, []int) {
	return file_kvpair_proto_rawDescGZIP(), []int{5}
}

func (x *LakeLogDetail) GetDeletes() *DeleteLakeFiles {
	if x != nil {
		return x.Deletes
	}
	return nil
}

func (x *LakeLogDetail) GetInserts() *InsertLakeFiles {
	if x != nil {
		return x.Inserts
	}
	return nil
}

type LakeFileDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dbid      uint64    `protobuf:"varint,1,opt,name=dbid,proto3" json:"dbid,omitempty"`
	Rel       uint64    `protobuf:"varint,2,opt,name=rel,proto3" json:"rel,omitempty"`
	BaseInfo  *LakeFile `protobuf:"bytes,3,opt,name=base_info,json=baseInfo,proto3" json:"base_info,omitempty"`
	Xmin      uint64    `protobuf:"varint,4,opt,name=xmin,proto3" json:"xmin,omitempty"`
	Xmax      uint64    `protobuf:"varint,5,opt,name=xmax,proto3" json:"xmax,omitempty"`
	XminState uint32    `protobuf:"varint,6,opt,name=xmin_state,json=xminState,proto3" json:"xmin_state,omitempty"`
	XmaxState uint32    `protobuf:"varint,7,opt,name=xmax_state,json=xmaxState,proto3" json:"xmax_state,omitempty"`
	IsShared  bool      `protobuf:"varint,8,opt,name=is_shared,json=isShared,proto3" json:"is_shared,omitempty"`
}

func (x *LakeFileDetail) Reset() {
	*x = LakeFileDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvpair_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LakeFileDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LakeFileDetail) ProtoMessage() {}

func (x *LakeFileDetail) ProtoReflect() protoreflect.Message {
	mi := &file_kvpair_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LakeFileDetail.ProtoReflect.Descriptor instead.
func (*LakeFileDetail) Descriptor() ([]byte, []int) {
	return file_kvpair_proto_rawDescGZIP(), []int{6}
}

func (x *LakeFileDetail) GetDbid() uint64 {
	if x != nil {
		return x.Dbid
	}
	return 0
}

func (x *LakeFileDetail) GetRel() uint64 {
	if x != nil {
		return x.Rel
	}
	return 0
}

func (x *LakeFileDetail) GetBaseInfo() *LakeFile {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *LakeFileDetail) GetXmin() uint64 {
	if x != nil {
		return x.Xmin
	}
	return 0
}

func (x *LakeFileDetail) GetXmax() uint64 {
	if x != nil {
		return x.Xmax
	}
	return 0
}

func (x *LakeFileDetail) GetXminState() uint32 {
	if x != nil {
		return x.XminState
	}
	return 0
}

func (x *LakeFileDetail) GetXmaxState() uint32 {
	if x != nil {
		return x.XmaxState
	}
	return 0
}

func (x *LakeFileDetail) GetIsShared() bool {
	if x != nil {
		return x.IsShared
	}
	return false
}

type Relation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dbid uint64 `protobuf:"varint,1,opt,name=dbid,proto3" json:"dbid,omitempty"`
	Rel  uint64 `protobuf:"varint,2,opt,name=rel,proto3" json:"rel,omitempty"`
}

func (x *Relation) Reset() {
	*x = Relation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvpair_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relation) ProtoMessage() {}

func (x *Relation) ProtoReflect() protoreflect.Message {
	mi := &file_kvpair_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relation.ProtoReflect.Descriptor instead.
func (*Relation) Descriptor() ([]byte, []int) {
	return file_kvpair_proto_rawDescGZIP(), []int{7}
}

func (x *Relation) GetDbid() uint64 {
	if x != nil {
		return x.Dbid
	}
	return 0
}

func (x *Relation) GetRel() uint64 {
	if x != nil {
		return x.Rel
	}
	return 0
}

type LakeFileShared struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedRels []*Relation `protobuf:"bytes,2,rep,name=shared_rels,json=sharedRels,proto3" json:"shared_rels,omitempty"`
}

func (x *LakeFileShared) Reset() {
	*x = LakeFileShared{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvpair_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LakeFileShared) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LakeFileShared) ProtoMessage() {}

func (x *LakeFileShared) ProtoReflect() protoreflect.Message {
	mi := &file_kvpair_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LakeFileShared.ProtoReflect.Descriptor instead.
func (*LakeFileShared) Descriptor() ([]byte, []int) {
	return file_kvpair_proto_rawDescGZIP(), []int{8}
}

func (x *LakeFileShared) GetSharedRels() []*Relation {
	if x != nil {
		return x.SharedRels
	}
	return nil
}

type LakeSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId uint32      `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	S3Info  *S3Endpoint `protobuf:"bytes,2,opt,name=s3_info,json=s3Info,proto3" json:"s3_info,omitempty"`
}

func (x *LakeSpace) Reset() {
	*x = LakeSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvpair_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LakeSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LakeSpace) ProtoMessage() {}

func (x *LakeSpace) ProtoReflect() protoreflect.Message {
	mi := &file_kvpair_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LakeSpace.ProtoReflect.Descriptor instead.
func (*LakeSpace) Descriptor() ([]byte, []int) {
	return file_kvpair_proto_rawDescGZIP(), []int{9}
}

func (x *LakeSpace) GetSpaceId() uint32 {
	if x != nil {
		return x.SpaceId
	}
	return 0
}

func (x *LakeSpace) GetS3Info() *S3Endpoint {
	if x != nil {
		return x.S3Info
	}
	return nil
}

type Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dbid           uint64     `protobuf:"varint,1,opt,name=dbid,proto3" json:"dbid,omitempty"`
	Dbname         string     `protobuf:"bytes,2,opt,name=dbname,proto3" json:"dbname,omitempty"`
	OrganizationId uint64     `protobuf:"varint,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Space          *LakeSpace `protobuf:"bytes,4,opt,name=space,proto3" json:"space,omitempty"`
}

func (x *Database) Reset() {
	*x = Database{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvpair_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_kvpair_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_kvpair_proto_rawDescGZIP(), []int{10}
}

func (x *Database) GetDbid() uint64 {
	if x != nil {
		return x.Dbid
	}
	return 0
}

func (x *Database) GetDbname() string {
	if x != nil {
		return x.Dbname
	}
	return ""
}

func (x *Database) GetOrganizationId() uint64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *Database) GetSpace() *LakeSpace {
	if x != nil {
		return x.Space
	}
	return nil
}

type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity            string            `protobuf:"bytes,1,opt,name=severity,proto3" json:"severity,omitempty"`
	SeverityUnlocklized string            `protobuf:"bytes,2,opt,name=severity_unlocklized,json=severityUnlocklized,proto3" json:"severity_unlocklized,omitempty"`
	Code                string            `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Message             string            `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Detail              string            `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
	Hint                string            `protobuf:"bytes,6,opt,name=hint,proto3" json:"hint,omitempty"`
	Position            int32             `protobuf:"varint,7,opt,name=position,proto3" json:"position,omitempty"`
	InternalPosition    int32             `protobuf:"varint,8,opt,name=internal_position,json=internalPosition,proto3" json:"internal_position,omitempty"`
	InternalQuery       string            `protobuf:"bytes,9,opt,name=internal_query,json=internalQuery,proto3" json:"internal_query,omitempty"`
	Where               string            `protobuf:"bytes,10,opt,name=where,proto3" json:"where,omitempty"`
	SchemaName          string            `protobuf:"bytes,11,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName           string            `protobuf:"bytes,12,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	ColumnName          string            `protobuf:"bytes,13,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	DataTypeName        string            `protobuf:"bytes,14,opt,name=data_type_name,json=dataTypeName,proto3" json:"data_type_name,omitempty"`
	ConstraintName      string            `protobuf:"bytes,15,opt,name=constraint_name,json=constraintName,proto3" json:"constraint_name,omitempty"`
	File                string            `protobuf:"bytes,16,opt,name=file,proto3" json:"file,omitempty"`
	Line                int32             `protobuf:"varint,17,opt,name=line,proto3" json:"line,omitempty"`
	Outine              string            `protobuf:"bytes,18,opt,name=outine,proto3" json:"outine,omitempty"`
	UnkownFields        map[string]string `protobuf:"bytes,19,rep,name=unkown_fields,json=unkownFields,proto3" json:"unkown_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvpair_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvpair_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_kvpair_proto_rawDescGZIP(), []int{11}
}

func (x *ErrorResponse) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *ErrorResponse) GetSeverityUnlocklized() string {
	if x != nil {
		return x.SeverityUnlocklized
	}
	return ""
}

func (x *ErrorResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ErrorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorResponse) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *ErrorResponse) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *ErrorResponse) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *ErrorResponse) GetInternalPosition() int32 {
	if x != nil {
		return x.InternalPosition
	}
	return 0
}

func (x *ErrorResponse) GetInternalQuery() string {
	if x != nil {
		return x.InternalQuery
	}
	return ""
}

func (x *ErrorResponse) GetWhere() string {
	if x != nil {
		return x.Where
	}
	return ""
}

func (x *ErrorResponse) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *ErrorResponse) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *ErrorResponse) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *ErrorResponse) GetDataTypeName() string {
	if x != nil {
		return x.DataTypeName
	}
	return ""
}

func (x *ErrorResponse) GetConstraintName() string {
	if x != nil {
		return x.ConstraintName
	}
	return ""
}

func (x *ErrorResponse) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *ErrorResponse) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *ErrorResponse) GetOutine() string {
	if x != nil {
		return x.Outine
	}
	return ""
}

func (x *ErrorResponse) GetUnkownFields() map[string]string {
	if x != nil {
		return x.UnkownFields
	}
	return nil
}

type WorkerResultData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dbid    uint64 `protobuf:"varint,1,opt,name=dbid,proto3" json:"dbid,omitempty"`
	QueryId uint64 `protobuf:"varint,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Rescode int32  `protobuf:"varint,3,opt,name=rescode,proto3" json:"rescode,omitempty"`
	// string sql_err_code = 3;
	// string message = 4;
	Message     *ErrorResponse `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	ResultDir   string         `protobuf:"bytes,5,opt,name=result_dir,json=resultDir,proto3" json:"result_dir,omitempty"`
	CmdType     uint32         `protobuf:"varint,6,opt,name=cmd_type,json=cmdType,proto3" json:"cmd_type,omitempty"`
	ProcessRows uint64         `protobuf:"varint,7,opt,name=process_rows,json=processRows,proto3" json:"process_rows,omitempty"`
	MetaFile    string         `protobuf:"bytes,8,opt,name=meta_file,json=metaFile,proto3" json:"meta_file,omitempty"`
	DataFiles   []string       `protobuf:"bytes,9,rep,name=data_files,json=dataFiles,proto3" json:"data_files,omitempty"`
}

func (x *WorkerResultData) Reset() {
	*x = WorkerResultData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvpair_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerResultData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerResultData) ProtoMessage() {}

func (x *WorkerResultData) ProtoReflect() protoreflect.Message {
	mi := &file_kvpair_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerResultData.ProtoReflect.Descriptor instead.
func (*WorkerResultData) Descriptor() ([]byte, []int) {
	return file_kvpair_proto_rawDescGZIP(), []int{12}
}

func (x *WorkerResultData) GetDbid() uint64 {
	if x != nil {
		return x.Dbid
	}
	return 0
}

func (x *WorkerResultData) GetQueryId() uint64 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *WorkerResultData) GetRescode() int32 {
	if x != nil {
		return x.Rescode
	}
	return 0
}

func (x *WorkerResultData) GetMessage() *ErrorResponse {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *WorkerResultData) GetResultDir() string {
	if x != nil {
		return x.ResultDir
	}
	return ""
}

func (x *WorkerResultData) GetCmdType() uint32 {
	if x != nil {
		return x.CmdType
	}
	return 0
}

func (x *WorkerResultData) GetProcessRows() uint64 {
	if x != nil {
		return x.ProcessRows
	}
	return 0
}

func (x *WorkerResultData) GetMetaFile() string {
	if x != nil {
		return x.MetaFile
	}
	return ""
}

func (x *WorkerResultData) GetDataFiles() []string {
	if x != nil {
		return x.DataFiles
	}
	return nil
}

type RelFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rel     uint64      `protobuf:"varint,1,opt,name=rel,proto3" json:"rel,omitempty"`
	Files   []*LakeFile `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	Version []byte      `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *RelFiles) Reset() {
	*x = RelFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvpair_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelFiles) ProtoMessage() {}

func (x *RelFiles) ProtoReflect() protoreflect.Message {
	mi := &file_kvpair_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelFiles.ProtoReflect.Descriptor instead.
func (*RelFiles) Descriptor() ([]byte, []int) {
	return file_kvpair_proto_rawDescGZIP(), []int{13}
}

func (x *RelFiles) GetRel() uint64 {
	if x != nil {
		return x.Rel
	}
	return 0
}

func (x *RelFiles) GetFiles() []*LakeFile {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *RelFiles) GetVersion() []byte {
	if x != nil {
		return x.Version
	}
	return nil
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid                uint64            `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Dbid               uint64            `protobuf:"varint,3,opt,name=dbid,proto3" json:"dbid,omitempty"`
	Token              []byte            `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	State              int32             `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	AutoCommit         bool              `protobuf:"varint,6,opt,name=auto_commit,json=autoCommit,proto3" json:"auto_commit,omitempty"`
	ReadTransactionId  uint64            `protobuf:"varint,7,opt,name=read_transaction_id,json=readTransactionId,proto3" json:"read_transaction_id,omitempty"`
	WriteTransactionId uint64            `protobuf:"varint,8,opt,name=write_transaction_id,json=writeTransactionId,proto3" json:"write_transaction_id,omitempty"`
	QueryId            uint64            `protobuf:"varint,9,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Params             map[string]string `protobuf:"bytes,10,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //ReadOnlyTransactions map[uint64]uint64
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvpair_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_kvpair_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_kvpair_proto_rawDescGZIP(), []int{14}
}

func (x *Session) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Session) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Session) GetDbid() uint64 {
	if x != nil {
		return x.Dbid
	}
	return 0
}

func (x *Session) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *Session) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Session) GetAutoCommit() bool {
	if x != nil {
		return x.AutoCommit
	}
	return false
}

func (x *Session) GetReadTransactionId() uint64 {
	if x != nil {
		return x.ReadTransactionId
	}
	return 0
}

func (x *Session) GetWriteTransactionId() uint64 {
	if x != nil {
		return x.WriteTransactionId
	}
	return 0
}

func (x *Session) GetQueryId() uint64 {
	if x != nil {
		return x.QueryId
	}
	return 0
}

func (x *Session) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

type LocKValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xid uint64 `protobuf:"varint,2,opt,name=xid,proto3" json:"xid,omitempty"`
}

func (x *LocKValue) Reset() {
	*x = LocKValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvpair_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocKValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocKValue) ProtoMessage() {}

func (x *LocKValue) ProtoReflect() protoreflect.Message {
	mi := &file_kvpair_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocKValue.ProtoReflect.Descriptor instead.
func (*LocKValue) Descriptor() ([]byte, []int) {
	return file_kvpair_proto_rawDescGZIP(), []int{15}
}

func (x *LocKValue) GetXid() uint64 {
	if x != nil {
		return x.Xid
	}
	return 0
}

type WorkerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerId     uint64      `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Cluster      uint32      `protobuf:"varint,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Addr         string      `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	WorkerState  WorkerState `protobuf:"varint,4,opt,name=worker_state,json=workerState,proto3,enum=sdb.WorkerState" json:"worker_state,omitempty"`
	CurrectIndex uint64      `protobuf:"varint,5,opt,name=currect_index,json=currectIndex,proto3" json:"currect_index,omitempty"`
}

func (x *WorkerStatus) Reset() {
	*x = WorkerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kvpair_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStatus) ProtoMessage() {}

func (x *WorkerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_kvpair_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStatus.ProtoReflect.Descriptor instead.
func (*WorkerStatus) Descriptor() ([]byte, []int) {
	return file_kvpair_proto_rawDescGZIP(), []int{16}
}

func (x *WorkerStatus) GetWorkerId() uint64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *WorkerStatus) GetCluster() uint32 {
	if x != nil {
		return x.Cluster
	}
	return 0
}

func (x *WorkerStatus) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *WorkerStatus) GetWorkerState() WorkerState {
	if x != nil {
		return x.WorkerState
	}
	return WorkerState_WSInit
}

func (x *WorkerStatus) GetCurrectIndex() uint64 {
	if x != nil {
		return x.CurrectIndex
	}
	return 0
}

var File_kvpair_proto protoreflect.FileDescriptor

var file_kvpair_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6b, 0x76, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03,
	0x73, 0x64, 0x62, 0x1a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x39, 0x0a, 0x08, 0x4c, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x78, 0x0a, 0x0c,
	0x4c, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x64, 0x62,
	0x2e, 0x4c, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x37, 0x0a,
	0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x64, 0x62, 0x2e, 0x4c,
	0x61, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x3c,
	0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x64, 0x62, 0x2e, 0x4c, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x10,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4c, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x73, 0x64, 0x62, 0x2e, 0x4c, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x0d, 0x4c, 0x61, 0x6b, 0x65, 0x4c, 0x6f, 0x67,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x64, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x07, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x64, 0x62, 0x2e, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x4c, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x07, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x0e, 0x4c, 0x61, 0x6b, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x62, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x72, 0x65, 0x6c, 0x12,
	0x2a, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x64, 0x62, 0x2e, 0x4c, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x78,
	0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x78, 0x6d, 0x69, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x78, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x78,
	0x6d, 0x61, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x78, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x78, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x78, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x78, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x22, 0x30,
	0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x62, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x72, 0x65, 0x6c,
	0x22, 0x40, 0x0a, 0x0e, 0x4c, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x64, 0x62, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x6c, 0x73, 0x22, 0x50, 0x0a, 0x09, 0x4c, 0x61, 0x6b, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x33,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x64,
	0x62, 0x2e, 0x53, 0x33, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x33,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x64, 0x62, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x64, 0x62, 0x2e, 0x4c, 0x61, 0x6b, 0x65,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xba, 0x05, 0x0a,
	0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x49, 0x0a,
	0x0d, 0x75, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x75, 0x6e, 0x6b, 0x6f,
	0x77, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6f,
	0x77, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x02, 0x0a, 0x10, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x62,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x64, 0x62, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x44, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f,
	0x77, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x5b,
	0x0a, 0x08, 0x52, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x72, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x64,
	0x62, 0x2e, 0x4c, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf6, 0x02, 0x0a, 0x07,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x62, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x61, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x61, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x64, 0x62, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x1d, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x4b, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x78, 0x69, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12,
	0x33, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x73, 0x64, 0x62, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2a, 0x4e, 0x0a, 0x0b, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x53, 0x49, 0x6e,
	0x69, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x53, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x53, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x53, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x57, 0x53, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x04, 0x42, 0x0a, 0x5a, 0x05, 0x2e, 0x2f, 0x73,
	0x64, 0x62, 0x80, 0x01, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kvpair_proto_rawDescOnce sync.Once
	file_kvpair_proto_rawDescData = file_kvpair_proto_rawDesc
)

func file_kvpair_proto_rawDescGZIP() []byte {
	file_kvpair_proto_rawDescOnce.Do(func() {
		file_kvpair_proto_rawDescData = protoimpl.X.CompressGZIP(file_kvpair_proto_rawDescData)
	})
	return file_kvpair_proto_rawDescData
}

var file_kvpair_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kvpair_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_kvpair_proto_goTypes = []interface{}{
	(WorkerState)(0),         // 0: sdb.WorkerState
	(*LakeFile)(nil),         // 1: sdb.LakeFile
	(*LakeFileMeta)(nil),     // 2: sdb.LakeFileMeta
	(*DeleteLakeFiles)(nil),  // 3: sdb.DeleteLakeFiles
	(*InsertLakeFiles)(nil),  // 4: sdb.InsertLakeFiles
	(*PrepareLakeFiles)(nil), // 5: sdb.PrepareLakeFiles
	(*LakeLogDetail)(nil),    // 6: sdb.LakeLogDetail
	(*LakeFileDetail)(nil),   // 7: sdb.LakeFileDetail
	(*Relation)(nil),         // 8: sdb.Relation
	(*LakeFileShared)(nil),   // 9: sdb.LakeFileShared
	(*LakeSpace)(nil),        // 10: sdb.LakeSpace
	(*Database)(nil),         // 11: sdb.Database
	(*ErrorResponse)(nil),    // 12: sdb.ErrorResponse
	(*WorkerResultData)(nil), // 13: sdb.WorkerResultData
	(*RelFiles)(nil),         // 14: sdb.RelFiles
	(*Session)(nil),          // 15: sdb.Session
	(*LocKValue)(nil),        // 16: sdb.LocKValue
	(*WorkerStatus)(nil),     // 17: sdb.WorkerStatus
	nil,                      // 18: sdb.LakeFileMeta.MetaEntry
	nil,                      // 19: sdb.ErrorResponse.UnkownFieldsEntry
	nil,                      // 20: sdb.Session.ParamsEntry
	(*S3Endpoint)(nil),       // 21: sdb.S3Endpoint
}
var file_kvpair_proto_depIdxs = []int32{
	18, // 0: sdb.LakeFileMeta.meta:type_name -> sdb.LakeFileMeta.MetaEntry
	1,  // 1: sdb.DeleteLakeFiles.files:type_name -> sdb.LakeFile
	7,  // 2: sdb.InsertLakeFiles.files:type_name -> sdb.LakeFileDetail
	1,  // 3: sdb.PrepareLakeFiles.files:type_name -> sdb.LakeFile
	3,  // 4: sdb.LakeLogDetail.deletes:type_name -> sdb.DeleteLakeFiles
	4,  // 5: sdb.LakeLogDetail.inserts:type_name -> sdb.InsertLakeFiles
	1,  // 6: sdb.LakeFileDetail.base_info:type_name -> sdb.LakeFile
	8,  // 7: sdb.LakeFileShared.shared_rels:type_name -> sdb.Relation
	21, // 8: sdb.LakeSpace.s3_info:type_name -> sdb.S3Endpoint
	10, // 9: sdb.Database.space:type_name -> sdb.LakeSpace
	19, // 10: sdb.ErrorResponse.unkown_fields:type_name -> sdb.ErrorResponse.UnkownFieldsEntry
	12, // 11: sdb.WorkerResultData.message:type_name -> sdb.ErrorResponse
	1,  // 12: sdb.RelFiles.files:type_name -> sdb.LakeFile
	20, // 13: sdb.Session.params:type_name -> sdb.Session.ParamsEntry
	0,  // 14: sdb.WorkerStatus.worker_state:type_name -> sdb.WorkerState
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_kvpair_proto_init() }
func file_kvpair_proto_init() {
	if File_kvpair_proto != nil {
		return
	}
	file_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kvpair_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LakeFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvpair_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LakeFileMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvpair_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLakeFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvpair_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertLakeFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvpair_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareLakeFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvpair_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LakeLogDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvpair_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LakeFileDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvpair_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvpair_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LakeFileShared); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvpair_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LakeSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvpair_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Database); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvpair_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvpair_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerResultData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvpair_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvpair_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvpair_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocKValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kvpair_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kvpair_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kvpair_proto_goTypes,
		DependencyIndexes: file_kvpair_proto_depIdxs,
		EnumInfos:         file_kvpair_proto_enumTypes,
		MessageInfos:      file_kvpair_proto_msgTypes,
	}.Build()
	File_kvpair_proto = out.File
	file_kvpair_proto_rawDesc = nil
	file_kvpair_proto_goTypes = nil
	file_kvpair_proto_depIdxs = nil
}
