// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: schedule_service.proto

package sdb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScheduleClient is the client API for Schedule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleClient interface {
	Depart(ctx context.Context, in *ExecQueryRequest, opts ...grpc.CallOption) (*ExecQueryReply, error)
	PushWorkerResult(ctx context.Context, in *PushWorkerResultRequest, opts ...grpc.CallOption) (*PushWorkerResultReply, error)
	CheckQueryResult(ctx context.Context, in *CheckQueryResultRequest, opts ...grpc.CallOption) (*CheckQueryResultReply, error)
	NewWorkerId(ctx context.Context, in *NewWorkerIdRequest, opts ...grpc.CallOption) (*NewWorkerIdReply, error)
	WorkerPing(ctx context.Context, in *WorkerPingRequest, opts ...grpc.CallOption) (*WorkerPongReply, error)
}

type scheduleClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleClient(cc grpc.ClientConnInterface) ScheduleClient {
	return &scheduleClient{cc}
}

func (c *scheduleClient) Depart(ctx context.Context, in *ExecQueryRequest, opts ...grpc.CallOption) (*ExecQueryReply, error) {
	out := new(ExecQueryReply)
	err := c.cc.Invoke(ctx, "/sdb.Schedule/Depart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleClient) PushWorkerResult(ctx context.Context, in *PushWorkerResultRequest, opts ...grpc.CallOption) (*PushWorkerResultReply, error) {
	out := new(PushWorkerResultReply)
	err := c.cc.Invoke(ctx, "/sdb.Schedule/PushWorkerResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleClient) CheckQueryResult(ctx context.Context, in *CheckQueryResultRequest, opts ...grpc.CallOption) (*CheckQueryResultReply, error) {
	out := new(CheckQueryResultReply)
	err := c.cc.Invoke(ctx, "/sdb.Schedule/CheckQueryResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleClient) NewWorkerId(ctx context.Context, in *NewWorkerIdRequest, opts ...grpc.CallOption) (*NewWorkerIdReply, error) {
	out := new(NewWorkerIdReply)
	err := c.cc.Invoke(ctx, "/sdb.Schedule/NewWorkerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleClient) WorkerPing(ctx context.Context, in *WorkerPingRequest, opts ...grpc.CallOption) (*WorkerPongReply, error) {
	out := new(WorkerPongReply)
	err := c.cc.Invoke(ctx, "/sdb.Schedule/WorkerPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleServer is the server API for Schedule service.
// All implementations must embed UnimplementedScheduleServer
// for forward compatibility
type ScheduleServer interface {
	Depart(context.Context, *ExecQueryRequest) (*ExecQueryReply, error)
	PushWorkerResult(context.Context, *PushWorkerResultRequest) (*PushWorkerResultReply, error)
	CheckQueryResult(context.Context, *CheckQueryResultRequest) (*CheckQueryResultReply, error)
	NewWorkerId(context.Context, *NewWorkerIdRequest) (*NewWorkerIdReply, error)
	WorkerPing(context.Context, *WorkerPingRequest) (*WorkerPongReply, error)
	mustEmbedUnimplementedScheduleServer()
}

// UnimplementedScheduleServer must be embedded to have forward compatible implementations.
type UnimplementedScheduleServer struct {
}

func (UnimplementedScheduleServer) Depart(context.Context, *ExecQueryRequest) (*ExecQueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Depart not implemented")
}
func (UnimplementedScheduleServer) PushWorkerResult(context.Context, *PushWorkerResultRequest) (*PushWorkerResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushWorkerResult not implemented")
}
func (UnimplementedScheduleServer) CheckQueryResult(context.Context, *CheckQueryResultRequest) (*CheckQueryResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckQueryResult not implemented")
}
func (UnimplementedScheduleServer) NewWorkerId(context.Context, *NewWorkerIdRequest) (*NewWorkerIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewWorkerId not implemented")
}
func (UnimplementedScheduleServer) WorkerPing(context.Context, *WorkerPingRequest) (*WorkerPongReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkerPing not implemented")
}
func (UnimplementedScheduleServer) mustEmbedUnimplementedScheduleServer() {}

// UnsafeScheduleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleServer will
// result in compilation errors.
type UnsafeScheduleServer interface {
	mustEmbedUnimplementedScheduleServer()
}

func RegisterScheduleServer(s grpc.ServiceRegistrar, srv ScheduleServer) {
	s.RegisterService(&Schedule_ServiceDesc, srv)
}

func _Schedule_Depart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServer).Depart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdb.Schedule/Depart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServer).Depart(ctx, req.(*ExecQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schedule_PushWorkerResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushWorkerResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServer).PushWorkerResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdb.Schedule/PushWorkerResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServer).PushWorkerResult(ctx, req.(*PushWorkerResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schedule_CheckQueryResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckQueryResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServer).CheckQueryResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdb.Schedule/CheckQueryResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServer).CheckQueryResult(ctx, req.(*CheckQueryResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schedule_NewWorkerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewWorkerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServer).NewWorkerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdb.Schedule/NewWorkerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServer).NewWorkerId(ctx, req.(*NewWorkerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schedule_WorkerPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServer).WorkerPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdb.Schedule/WorkerPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServer).WorkerPing(ctx, req.(*WorkerPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Schedule_ServiceDesc is the grpc.ServiceDesc for Schedule service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Schedule_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdb.Schedule",
	HandlerType: (*ScheduleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Depart",
			Handler:    _Schedule_Depart_Handler,
		},
		{
			MethodName: "PushWorkerResult",
			Handler:    _Schedule_PushWorkerResult_Handler,
		},
		{
			MethodName: "CheckQueryResult",
			Handler:    _Schedule_CheckQueryResult_Handler,
		},
		{
			MethodName: "NewWorkerId",
			Handler:    _Schedule_NewWorkerId_Handler,
		},
		{
			MethodName: "WorkerPing",
			Handler:    _Schedule_WorkerPing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedule_service.proto",
}
