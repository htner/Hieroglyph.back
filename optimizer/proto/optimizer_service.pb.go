// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.6
// source: optimizer_service.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PBDirectDispatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDirectDispatch bool    `protobuf:"varint,1,opt,name=is_direct_dispatch,json=isDirectDispatch,proto3" json:"is_direct_dispatch,omitempty"`
	Segments         []int32 `protobuf:"varint,2,rep,packed,name=segments,proto3" json:"segments,omitempty"`
}

func (x *PBDirectDispatchInfo) Reset() {
	*x = PBDirectDispatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optimizer_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBDirectDispatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBDirectDispatchInfo) ProtoMessage() {}

func (x *PBDirectDispatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_optimizer_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBDirectDispatchInfo.ProtoReflect.Descriptor instead.
func (*PBDirectDispatchInfo) Descriptor() ([]byte, []int) {
	return file_optimizer_service_proto_rawDescGZIP(), []int{0}
}

func (x *PBDirectDispatchInfo) GetIsDirectDispatch() bool {
	if x != nil {
		return x.IsDirectDispatch
	}
	return false
}

func (x *PBDirectDispatchInfo) GetSegments() []int32 {
	if x != nil {
		return x.Segments
	}
	return nil
}

type PBPlanSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SliceIndex         int32                 `protobuf:"varint,1,opt,name=slice_index,json=sliceIndex,proto3" json:"slice_index,omitempty"`
	ParentIndex        int32                 `protobuf:"varint,2,opt,name=parent_index,json=parentIndex,proto3" json:"parent_index,omitempty"`
	GangType           int32                 `protobuf:"varint,3,opt,name=gang_type,json=gangType,proto3" json:"gang_type,omitempty"`
	NumSegments        int32                 `protobuf:"varint,4,opt,name=num_segments,json=numSegments,proto3" json:"num_segments,omitempty"`
	Segindex           int32                 `protobuf:"varint,5,opt,name=segindex,proto3" json:"segindex,omitempty"`
	DirectDispatchInfo *PBDirectDispatchInfo `protobuf:"bytes,6,opt,name=direct_dispatch_info,json=directDispatchInfo,proto3" json:"direct_dispatch_info,omitempty"`
}

func (x *PBPlanSlice) Reset() {
	*x = PBPlanSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optimizer_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PBPlanSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBPlanSlice) ProtoMessage() {}

func (x *PBPlanSlice) ProtoReflect() protoreflect.Message {
	mi := &file_optimizer_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBPlanSlice.ProtoReflect.Descriptor instead.
func (*PBPlanSlice) Descriptor() ([]byte, []int) {
	return file_optimizer_service_proto_rawDescGZIP(), []int{1}
}

func (x *PBPlanSlice) GetSliceIndex() int32 {
	if x != nil {
		return x.SliceIndex
	}
	return 0
}

func (x *PBPlanSlice) GetParentIndex() int32 {
	if x != nil {
		return x.ParentIndex
	}
	return 0
}

func (x *PBPlanSlice) GetGangType() int32 {
	if x != nil {
		return x.GangType
	}
	return 0
}

func (x *PBPlanSlice) GetNumSegments() int32 {
	if x != nil {
		return x.NumSegments
	}
	return 0
}

func (x *PBPlanSlice) GetSegindex() int32 {
	if x != nil {
		return x.Segindex
	}
	return 0
}

func (x *PBPlanSlice) GetDirectDispatchInfo() *PBDirectDispatchInfo {
	if x != nil {
		return x.DirectDispatchInfo
	}
	return nil
}

// The request message containing the user's name.
type OptimizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sql  string `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
	Sid  uint64 `protobuf:"varint,3,opt,name=sid,proto3" json:"sid,omitempty"`
	Uid  uint64 `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Dbid uint64 `protobuf:"varint,5,opt,name=dbid,proto3" json:"dbid,omitempty"`
	Xid  uint64 `protobuf:"varint,6,opt,name=xid,proto3" json:"xid,omitempty"`
}

func (x *OptimizeRequest) Reset() {
	*x = OptimizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optimizer_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptimizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptimizeRequest) ProtoMessage() {}

func (x *OptimizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_optimizer_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptimizeRequest.ProtoReflect.Descriptor instead.
func (*OptimizeRequest) Descriptor() ([]byte, []int) {
	return file_optimizer_service_proto_rawDescGZIP(), []int{2}
}

func (x *OptimizeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OptimizeRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *OptimizeRequest) GetSid() uint64 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *OptimizeRequest) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *OptimizeRequest) GetDbid() uint64 {
	if x != nil {
		return x.Dbid
	}
	return 0
}

func (x *OptimizeRequest) GetXid() uint64 {
	if x != nil {
		return x.Xid
	}
	return 0
}

// The response message containing the greetings
type OptimizeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message       string         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	PlanstmtStr   []byte         `protobuf:"bytes,2,opt,name=planstmt_str,json=planstmtStr,proto3" json:"planstmt_str,omitempty"`
	PlanDxlStr    []byte         `protobuf:"bytes,3,opt,name=plan_dxl_str,json=planDxlStr,proto3" json:"plan_dxl_str,omitempty"` // TODO maybe problem FIXME_SDB
	PlanParamsStr []byte         `protobuf:"bytes,4,opt,name=plan_params_str,json=planParamsStr,proto3" json:"plan_params_str,omitempty"`
	Slices        []*PBPlanSlice `protobuf:"bytes,5,rep,name=slices,proto3" json:"slices,omitempty"`
}

func (x *OptimizeReply) Reset() {
	*x = OptimizeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optimizer_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptimizeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptimizeReply) ProtoMessage() {}

func (x *OptimizeReply) ProtoReflect() protoreflect.Message {
	mi := &file_optimizer_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptimizeReply.ProtoReflect.Descriptor instead.
func (*OptimizeReply) Descriptor() ([]byte, []int) {
	return file_optimizer_service_proto_rawDescGZIP(), []int{3}
}

func (x *OptimizeReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OptimizeReply) GetPlanstmtStr() []byte {
	if x != nil {
		return x.PlanstmtStr
	}
	return nil
}

func (x *OptimizeReply) GetPlanDxlStr() []byte {
	if x != nil {
		return x.PlanDxlStr
	}
	return nil
}

func (x *OptimizeReply) GetPlanParamsStr() []byte {
	if x != nil {
		return x.PlanParamsStr
	}
	return nil
}

func (x *OptimizeReply) GetSlices() []*PBPlanSlice {
	if x != nil {
		return x.Slices
	}
	return nil
}

var File_optimizer_service_proto protoreflect.FileDescriptor

var file_optimizer_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x73, 0x64, 0x62, 0x22, 0x60,
	0x0a, 0x14, 0x50, 0x42, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xfa, 0x01, 0x0a, 0x0b, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x67, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x4b, 0x0a, 0x14, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x64, 0x62, 0x2e, 0x50, 0x42, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x81, 0x01,
	0x0a, 0x0f, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x62, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x62, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x78, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x78, 0x69,
	0x64, 0x22, 0xc0, 0x01, 0x0a, 0x0d, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x74, 0x6d, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x74, 0x6d, 0x74, 0x53, 0x74, 0x72,
	0x12, 0x20, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x78, 0x6c, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x78, 0x6c, 0x53,
	0x74, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x6c, 0x61,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x74, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x64, 0x62,
	0x2e, 0x50, 0x42, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x73, 0x32, 0x43, 0x0a, 0x09, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x2e,
	0x73, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x73, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x07, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x80, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_optimizer_service_proto_rawDescOnce sync.Once
	file_optimizer_service_proto_rawDescData = file_optimizer_service_proto_rawDesc
)

func file_optimizer_service_proto_rawDescGZIP() []byte {
	file_optimizer_service_proto_rawDescOnce.Do(func() {
		file_optimizer_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_optimizer_service_proto_rawDescData)
	})
	return file_optimizer_service_proto_rawDescData
}

var file_optimizer_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_optimizer_service_proto_goTypes = []interface{}{
	(*PBDirectDispatchInfo)(nil), // 0: sdb.PBDirectDispatchInfo
	(*PBPlanSlice)(nil),          // 1: sdb.PBPlanSlice
	(*OptimizeRequest)(nil),      // 2: sdb.OptimizeRequest
	(*OptimizeReply)(nil),        // 3: sdb.OptimizeReply
}
var file_optimizer_service_proto_depIdxs = []int32{
	0, // 0: sdb.PBPlanSlice.direct_dispatch_info:type_name -> sdb.PBDirectDispatchInfo
	1, // 1: sdb.OptimizeReply.slices:type_name -> sdb.PBPlanSlice
	2, // 2: sdb.Optimizer.Optimize:input_type -> sdb.OptimizeRequest
	3, // 3: sdb.Optimizer.Optimize:output_type -> sdb.OptimizeReply
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_optimizer_service_proto_init() }
func file_optimizer_service_proto_init() {
	if File_optimizer_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_optimizer_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBDirectDispatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_optimizer_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PBPlanSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_optimizer_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptimizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_optimizer_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptimizeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_optimizer_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_optimizer_service_proto_goTypes,
		DependencyIndexes: file_optimizer_service_proto_depIdxs,
		MessageInfos:      file_optimizer_service_proto_msgTypes,
	}.Build()
	File_optimizer_service_proto = out.File
	file_optimizer_service_proto_rawDesc = nil
	file_optimizer_service_proto_goTypes = nil
	file_optimizer_service_proto_depIdxs = nil
}
